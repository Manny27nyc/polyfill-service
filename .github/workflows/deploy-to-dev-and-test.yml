name: Deploy to dev and test
on: [pull_request]
env:
  terraform_version: '0.12.29'
  terraform_working_dir: 'fastly/terraform/'
  fastly_service_id: ${{ secrets.FASTLY_SERVICE_ID_DEV }}
  domain: origami-polyfill-service-dev.in.ft.com
jobs:
  deploy-to-heroku-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - uses: akhileshns/heroku-deploy@v3.8.8 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_AUTH_TOKEN}}
          heroku_app_name: "origami-polyfill-service-int"
          heroku_email: "jake.champion@ft.com"
          justlogin: true
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/financial-times/polyfill-service
          VERSION=edge
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          TAGS="$TAGS,registry.heroku.com/origami-polyfill-service-int/web"
          echo ::set-output name=tags::${TAGS}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to heroku container registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: _
          password: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          target: runtime
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      - run: heroku container:release web --app "origami-polyfill-service-int"

  deploy-to-fastly-dev:
    needs: [deploy-to-heroku-dev]
    runs-on: ubuntu-latest
    steps:
      - name: env
        run: echo "commit-sha=$(echo ${GITHUB_SHA})" >> $GITHUB_ENV
      - run : echo "${{ env.commit-sha }}" > $GITHUB_WORKSPACE/witness-${{ env.commit-sha }}
      - name: record ${{ env.commit-sha }} witness
        id: witness
        uses: actions/cache@v2.1.5
        with:
          path: $GITHUB_WORKSPACE/witness-${{ env.commit-sha }}
          key: witness--${{ env.commit-sha }}
      - uses: actions/checkout@v2
        if: steps.witness.outputs.cache-hit != 'true'
      - run: git fetch --prune --unshallow
        if: steps.witness.outputs.cache-hit != 'true'
      - uses: actions/setup-node@v2.1.5
        if: steps.witness.outputs.cache-hit != 'true'
        with:
          node-version: 12.x
      - name: Cache node modules
        if: steps.witness.outputs.cache-hit != 'true'
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
        if: steps.witness.outputs.cache-hit != 'true'
      - name: 'Terraform Format'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Remove the staging and production terraform configuration overrides
        if: steps.witness.outputs.cache-hit != 'true'
        run: rm -f terraform.tfstate fastly/terraform/qa_override.tf fastly/terraform/production_override.tf fastly/terraform/domains_override.tf
      - name: Turnstyle
        if: steps.witness.outputs.cache-hit != 'true'
        uses: softprops/turnstyle@v1
        with:
          same-branch-only: false
      - name: 'Terraform Init'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Import Fastly Service'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'import'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
          args: 'fastly_service_v1.app ${{ env.fastly_service_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: 'Terraform Import Fastly Service Dictionary Items'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'import'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
          args: 'fastly_service_dictionary_items_v1.items "${{ env.fastly_service_id }}/2RYpb2YAbYtpjSjwok0VWc"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: 'Terraform Validate'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Plan'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
          args: '-out=plan.tfplan'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: 'Terraform Apply'
        if: steps.witness.outputs.cache-hit != 'true'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.terraform_working_dir }}
          tf_actions_comment: false
          args: '--auto-approve'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - run: "curl -X POST -H \"Fastly-Key: ${{ secrets.FASTLY_API_KEY }}\" https://api.fastly.com/service/${{ env.fastly_service_id }}/purge_all"
        if: steps.witness.outputs.cache-hit != 'true'
      - run: sleep 60
        if: steps.witness.outputs.cache-hit != 'true'

  end-to-end-test:
    needs: [deploy-to-fastly-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      - name: Cache node modules
        uses: actions/cache@v2.1.5
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run test:integration
        env:
          HOST: "https://${{ env.domain }}"
